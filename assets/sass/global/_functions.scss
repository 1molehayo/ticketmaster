@use "sass:math";

// colors
@function color($key) {
  @if map-has-key($colors, $key) {
    @return map-get($colors, $key);
  }

  @error 'Unknown `#{$key}` in $colors.';
  @return null;
}

// fonts
@function get-font-family($keyword) {
  @if not map-has-key($font-families, $keyword) {
    @error 'Unsupported `font-family` keyword `#{$keyword}`';

    @return null;
  }

  @return map-get($font-families, $keyword);
}

@function get-font-size($keyword) {
  @if not map-has-key($font-sizes, $keyword) {
    @error 'Unsupported `font-size` keyword `#{$keyword}`';

    @return null;
  }

  @return map-get($font-sizes, $keyword);
}

@function get-font-weight($keyword) {
  @if not map-has-key($font-weights, $keyword) {
    @error 'Unsupported `font-weight` keyword `#{$keyword}`';

    @return null;
  }

  @return map-get($font-weights, $keyword);
}

// grid
@function get-break-point($keyword) {
  @if not map-has-key($break-points, $keyword) {
    @error 'Unsupported `break-point` keyword `#{$keyword}`';

    @return null;
  }

  @return map-get($break-points, $keyword);
}

@function validate-column($num) {
  @if $num > $num-of-columns {
    @error 'Unsupported `column` number `#{$keyword}`';

    @return null;
  }

  @return $num;
}

@function get-top-position($keyword) {
  $top-no-padding: $modal-close-position - 1rem;
  $top-distance: math.div(($top-no-padding - get-font-size($keyword)), 2);

  @return $top-no-padding - $top-distance;
}
